/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as WinderIndexImport } from './routes/winder/index'
import { Route as OpenIndexImport } from './routes/open/index'
import { Route as EmbedPubIdImport } from './routes/embed/$pubId'
import { Route as appLayoutImport } from './routes/(app)/_layout'
import { Route as appLayoutIndexImport } from './routes/(app)/_layout/index'
import { Route as appLayoutModIndexImport } from './routes/(app)/_layout/mod/index'
import { Route as appLayoutFeedIndexImport } from './routes/(app)/_layout/feed/index'
import { Route as appLayoutWatchPubIdImport } from './routes/(app)/_layout/watch/$pubId'
import { Route as appLayoutUHandleImport } from './routes/(app)/_layout/u/$handle'

// Create Virtual Routes

const appImport = createFileRoute('/(app)')()

// Create/Update Routes

const appRoute = appImport.update({
  id: '/(app)',
  getParentRoute: () => rootRoute,
} as any)

const WinderIndexRoute = WinderIndexImport.update({
  path: '/winder/',
  getParentRoute: () => rootRoute,
} as any)

const OpenIndexRoute = OpenIndexImport.update({
  path: '/open/',
  getParentRoute: () => rootRoute,
} as any)

const EmbedPubIdRoute = EmbedPubIdImport.update({
  path: '/embed/$pubId',
  getParentRoute: () => rootRoute,
} as any)

const appLayoutRoute = appLayoutImport.update({
  id: '/_layout',
  getParentRoute: () => appRoute,
} as any)

const appLayoutIndexRoute = appLayoutIndexImport.update({
  path: '/',
  getParentRoute: () => appLayoutRoute,
} as any)

const appLayoutModIndexRoute = appLayoutModIndexImport.update({
  path: '/mod/',
  getParentRoute: () => appLayoutRoute,
} as any)

const appLayoutFeedIndexRoute = appLayoutFeedIndexImport.update({
  path: '/feed/',
  getParentRoute: () => appLayoutRoute,
} as any)

const appLayoutWatchPubIdRoute = appLayoutWatchPubIdImport.update({
  path: '/watch/$pubId',
  getParentRoute: () => appLayoutRoute,
} as any)

const appLayoutUHandleRoute = appLayoutUHandleImport.update({
  path: '/u/$handle',
  getParentRoute: () => appLayoutRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(app)': {
      id: '/(app)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof appImport
      parentRoute: typeof rootRoute
    }
    '/(app)/_layout': {
      id: '/(app)/_layout'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof appLayoutImport
      parentRoute: typeof appRoute
    }
    '/embed/$pubId': {
      id: '/embed/$pubId'
      path: '/embed/$pubId'
      fullPath: '/embed/$pubId'
      preLoaderRoute: typeof EmbedPubIdImport
      parentRoute: typeof rootRoute
    }
    '/open/': {
      id: '/open/'
      path: '/open'
      fullPath: '/open'
      preLoaderRoute: typeof OpenIndexImport
      parentRoute: typeof rootRoute
    }
    '/winder/': {
      id: '/winder/'
      path: '/winder'
      fullPath: '/winder'
      preLoaderRoute: typeof WinderIndexImport
      parentRoute: typeof rootRoute
    }
    '/(app)/_layout/': {
      id: '/(app)/_layout/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof appLayoutIndexImport
      parentRoute: typeof appLayoutImport
    }
    '/(app)/_layout/u/$handle': {
      id: '/(app)/_layout/u/$handle'
      path: '/u/$handle'
      fullPath: '/u/$handle'
      preLoaderRoute: typeof appLayoutUHandleImport
      parentRoute: typeof appLayoutImport
    }
    '/(app)/_layout/watch/$pubId': {
      id: '/(app)/_layout/watch/$pubId'
      path: '/watch/$pubId'
      fullPath: '/watch/$pubId'
      preLoaderRoute: typeof appLayoutWatchPubIdImport
      parentRoute: typeof appLayoutImport
    }
    '/(app)/_layout/feed/': {
      id: '/(app)/_layout/feed/'
      path: '/feed'
      fullPath: '/feed'
      preLoaderRoute: typeof appLayoutFeedIndexImport
      parentRoute: typeof appLayoutImport
    }
    '/(app)/_layout/mod/': {
      id: '/(app)/_layout/mod/'
      path: '/mod'
      fullPath: '/mod'
      preLoaderRoute: typeof appLayoutModIndexImport
      parentRoute: typeof appLayoutImport
    }
  }
}

// Create and export the route tree

interface appLayoutRouteChildren {
  appLayoutIndexRoute: typeof appLayoutIndexRoute
  appLayoutUHandleRoute: typeof appLayoutUHandleRoute
  appLayoutWatchPubIdRoute: typeof appLayoutWatchPubIdRoute
  appLayoutFeedIndexRoute: typeof appLayoutFeedIndexRoute
  appLayoutModIndexRoute: typeof appLayoutModIndexRoute
}

const appLayoutRouteChildren: appLayoutRouteChildren = {
  appLayoutIndexRoute: appLayoutIndexRoute,
  appLayoutUHandleRoute: appLayoutUHandleRoute,
  appLayoutWatchPubIdRoute: appLayoutWatchPubIdRoute,
  appLayoutFeedIndexRoute: appLayoutFeedIndexRoute,
  appLayoutModIndexRoute: appLayoutModIndexRoute,
}

const appLayoutRouteWithChildren = appLayoutRoute._addFileChildren(
  appLayoutRouteChildren,
)

interface appRouteChildren {
  appLayoutRoute: typeof appLayoutRouteWithChildren
}

const appRouteChildren: appRouteChildren = {
  appLayoutRoute: appLayoutRouteWithChildren,
}

const appRouteWithChildren = appRoute._addFileChildren(appRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof appLayoutIndexRoute
  '/embed/$pubId': typeof EmbedPubIdRoute
  '/open': typeof OpenIndexRoute
  '/winder': typeof WinderIndexRoute
  '/u/$handle': typeof appLayoutUHandleRoute
  '/watch/$pubId': typeof appLayoutWatchPubIdRoute
  '/feed': typeof appLayoutFeedIndexRoute
  '/mod': typeof appLayoutModIndexRoute
}

export interface FileRoutesByTo {
  '/embed/$pubId': typeof EmbedPubIdRoute
  '/open': typeof OpenIndexRoute
  '/winder': typeof WinderIndexRoute
  '/': typeof appLayoutIndexRoute
  '/u/$handle': typeof appLayoutUHandleRoute
  '/watch/$pubId': typeof appLayoutWatchPubIdRoute
  '/feed': typeof appLayoutFeedIndexRoute
  '/mod': typeof appLayoutModIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/(app)': typeof appRouteWithChildren
  '/(app)/_layout': typeof appLayoutRouteWithChildren
  '/embed/$pubId': typeof EmbedPubIdRoute
  '/open/': typeof OpenIndexRoute
  '/winder/': typeof WinderIndexRoute
  '/(app)/_layout/': typeof appLayoutIndexRoute
  '/(app)/_layout/u/$handle': typeof appLayoutUHandleRoute
  '/(app)/_layout/watch/$pubId': typeof appLayoutWatchPubIdRoute
  '/(app)/_layout/feed/': typeof appLayoutFeedIndexRoute
  '/(app)/_layout/mod/': typeof appLayoutModIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/embed/$pubId'
    | '/open'
    | '/winder'
    | '/u/$handle'
    | '/watch/$pubId'
    | '/feed'
    | '/mod'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/embed/$pubId'
    | '/open'
    | '/winder'
    | '/'
    | '/u/$handle'
    | '/watch/$pubId'
    | '/feed'
    | '/mod'
  id:
    | '__root__'
    | '/(app)'
    | '/(app)/_layout'
    | '/embed/$pubId'
    | '/open/'
    | '/winder/'
    | '/(app)/_layout/'
    | '/(app)/_layout/u/$handle'
    | '/(app)/_layout/watch/$pubId'
    | '/(app)/_layout/feed/'
    | '/(app)/_layout/mod/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  appRoute: typeof appRouteWithChildren
  EmbedPubIdRoute: typeof EmbedPubIdRoute
  OpenIndexRoute: typeof OpenIndexRoute
  WinderIndexRoute: typeof WinderIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  appRoute: appRouteWithChildren,
  EmbedPubIdRoute: EmbedPubIdRoute,
  OpenIndexRoute: OpenIndexRoute,
  WinderIndexRoute: WinderIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/(app)",
        "/embed/$pubId",
        "/open/",
        "/winder/"
      ]
    },
    "/(app)": {
      "filePath": "(app)",
      "children": [
        "/(app)/_layout"
      ]
    },
    "/(app)/_layout": {
      "filePath": "(app)/_layout.tsx",
      "parent": "/(app)",
      "children": [
        "/(app)/_layout/",
        "/(app)/_layout/u/$handle",
        "/(app)/_layout/watch/$pubId",
        "/(app)/_layout/feed/",
        "/(app)/_layout/mod/"
      ]
    },
    "/embed/$pubId": {
      "filePath": "embed/$pubId.tsx"
    },
    "/open/": {
      "filePath": "open/index.tsx"
    },
    "/winder/": {
      "filePath": "winder/index.tsx"
    },
    "/(app)/_layout/": {
      "filePath": "(app)/_layout/index.tsx",
      "parent": "/(app)/_layout"
    },
    "/(app)/_layout/u/$handle": {
      "filePath": "(app)/_layout/u/$handle.tsx",
      "parent": "/(app)/_layout"
    },
    "/(app)/_layout/watch/$pubId": {
      "filePath": "(app)/_layout/watch/$pubId.tsx",
      "parent": "/(app)/_layout"
    },
    "/(app)/_layout/feed/": {
      "filePath": "(app)/_layout/feed/index.tsx",
      "parent": "/(app)/_layout"
    },
    "/(app)/_layout/mod/": {
      "filePath": "(app)/_layout/mod/index.tsx",
      "parent": "/(app)/_layout"
    }
  }
}
ROUTE_MANIFEST_END */
