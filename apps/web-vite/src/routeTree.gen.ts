/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as WinderIndexImport } from './routes/winder/index'
import { Route as OpenIndexImport } from './routes/open/index'
import { Route as ModIndexImport } from './routes/mod/index'
import { Route as WatchPubIdImport } from './routes/watch/$pubId'
import { Route as UHandleImport } from './routes/u/$handle'
import { Route as EmbedPubIdImport } from './routes/embed/$pubId'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const WinderIndexRoute = WinderIndexImport.update({
  path: '/winder/',
  getParentRoute: () => rootRoute,
} as any)

const OpenIndexRoute = OpenIndexImport.update({
  path: '/open/',
  getParentRoute: () => rootRoute,
} as any)

const ModIndexRoute = ModIndexImport.update({
  path: '/mod/',
  getParentRoute: () => rootRoute,
} as any)

const WatchPubIdRoute = WatchPubIdImport.update({
  path: '/watch/$pubId',
  getParentRoute: () => rootRoute,
} as any)

const UHandleRoute = UHandleImport.update({
  path: '/u/$handle',
  getParentRoute: () => rootRoute,
} as any)

const EmbedPubIdRoute = EmbedPubIdImport.update({
  path: '/embed/$pubId',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/embed/$pubId': {
      id: '/embed/$pubId'
      path: '/embed/$pubId'
      fullPath: '/embed/$pubId'
      preLoaderRoute: typeof EmbedPubIdImport
      parentRoute: typeof rootRoute
    }
    '/u/$handle': {
      id: '/u/$handle'
      path: '/u/$handle'
      fullPath: '/u/$handle'
      preLoaderRoute: typeof UHandleImport
      parentRoute: typeof rootRoute
    }
    '/watch/$pubId': {
      id: '/watch/$pubId'
      path: '/watch/$pubId'
      fullPath: '/watch/$pubId'
      preLoaderRoute: typeof WatchPubIdImport
      parentRoute: typeof rootRoute
    }
    '/mod/': {
      id: '/mod/'
      path: '/mod'
      fullPath: '/mod'
      preLoaderRoute: typeof ModIndexImport
      parentRoute: typeof rootRoute
    }
    '/open/': {
      id: '/open/'
      path: '/open'
      fullPath: '/open'
      preLoaderRoute: typeof OpenIndexImport
      parentRoute: typeof rootRoute
    }
    '/winder/': {
      id: '/winder/'
      path: '/winder'
      fullPath: '/winder'
      preLoaderRoute: typeof WinderIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/embed/$pubId': typeof EmbedPubIdRoute
  '/u/$handle': typeof UHandleRoute
  '/watch/$pubId': typeof WatchPubIdRoute
  '/mod': typeof ModIndexRoute
  '/open': typeof OpenIndexRoute
  '/winder': typeof WinderIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/embed/$pubId': typeof EmbedPubIdRoute
  '/u/$handle': typeof UHandleRoute
  '/watch/$pubId': typeof WatchPubIdRoute
  '/mod': typeof ModIndexRoute
  '/open': typeof OpenIndexRoute
  '/winder': typeof WinderIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/embed/$pubId': typeof EmbedPubIdRoute
  '/u/$handle': typeof UHandleRoute
  '/watch/$pubId': typeof WatchPubIdRoute
  '/mod/': typeof ModIndexRoute
  '/open/': typeof OpenIndexRoute
  '/winder/': typeof WinderIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/embed/$pubId'
    | '/u/$handle'
    | '/watch/$pubId'
    | '/mod'
    | '/open'
    | '/winder'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/embed/$pubId'
    | '/u/$handle'
    | '/watch/$pubId'
    | '/mod'
    | '/open'
    | '/winder'
  id:
    | '__root__'
    | '/'
    | '/embed/$pubId'
    | '/u/$handle'
    | '/watch/$pubId'
    | '/mod/'
    | '/open/'
    | '/winder/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  EmbedPubIdRoute: typeof EmbedPubIdRoute
  UHandleRoute: typeof UHandleRoute
  WatchPubIdRoute: typeof WatchPubIdRoute
  ModIndexRoute: typeof ModIndexRoute
  OpenIndexRoute: typeof OpenIndexRoute
  WinderIndexRoute: typeof WinderIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  EmbedPubIdRoute: EmbedPubIdRoute,
  UHandleRoute: UHandleRoute,
  WatchPubIdRoute: WatchPubIdRoute,
  ModIndexRoute: ModIndexRoute,
  OpenIndexRoute: OpenIndexRoute,
  WinderIndexRoute: WinderIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/embed/$pubId",
        "/u/$handle",
        "/watch/$pubId",
        "/mod/",
        "/open/",
        "/winder/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/embed/$pubId": {
      "filePath": "embed/$pubId.tsx"
    },
    "/u/$handle": {
      "filePath": "u/$handle.tsx"
    },
    "/watch/$pubId": {
      "filePath": "watch/$pubId.tsx"
    },
    "/mod/": {
      "filePath": "mod/index.tsx"
    },
    "/open/": {
      "filePath": "open/index.tsx"
    },
    "/winder/": {
      "filePath": "winder/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
